package org.scalaquery.ql

/**
 * A type class that encodes the unpacking `From => To` of a `Query[From]` to
 * its result element type `To`. It is only needed at compile-time. All of its
 * values at run-time are `null`.
 */
sealed trait =>> [-From, +To]

object =>> extends LowPriority_=>> {
  //implicit final def unpackTable[T]: AbstractTable[T] =>> T = null

<#list 2..22 as i>
  implicit final def unpackProjection${i}[<#list 1..i as j>T${j}<#if i != j>,</#if></#list>]: Projection${i}[<#list 1..i as j>T${j}<#if i != j>,</#if></#list>] =>> (<#list 1..i as j>T${j}<#if i != j>,</#if></#list>) = null
</#list>

  final type CanUnpack[-T] = T =>> _
  val unpackUnit: Unit =>> Unit = null
}

trait LowPriority_=>> {
  implicit final def unpackPrimitive[T : TypeMapper]: T =>> T = null
  implicit final def unpackColumnBase[T]: ColumnBase[T] =>> T = null

<#list 2..22 as i>
  implicit final def unpackTuple${i}[<#list 1..i as j>T${j}<#if i != j>,</#if></#list>, <#list 1..i as j>U${j}<#if i != j>,</#if></#list>](implicit <#list 1..i as j>u${j}: T${j} =>> U${j}<#if i != j>, </#if></#list>): (<#list 1..i as j>T${j}<#if i != j>,</#if></#list>) =>> (<#list 1..i as j>U${j}<#if i != j>,</#if></#list>) = null
</#list>
}

case class Unpackable[T, +U](value: T, unpack: T =>> U)
